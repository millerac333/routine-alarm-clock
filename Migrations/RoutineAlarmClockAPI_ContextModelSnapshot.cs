// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoutineAlarmClockAPI.Data;

namespace RoutineAlarmClockAPI.Migrations
{
    [DbContext(typeof(RoutineAlarmClockAPI_Context))]
    partial class RoutineAlarmClockAPI_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RoutineAlarmClockAPI.Models.AppTask", b =>
                {
                    b.Property<int>("AppTaskId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllotedTime");

                    b.Property<string>("AppUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<int>("Rating");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("AppTaskId");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppTask");

                    b.HasData(
                        new { AppTaskId = 1, AllotedTime = 5, AppUserId = "a64ffd83-15e9-497b-82c1-0c1bded333a9", Description = "Brush and floss teeth", Rating = 4, TaskTitle = "Brush Teeth" },
                        new { AppTaskId = 2, AllotedTime = 20, AppUserId = "a64ffd83-15e9-497b-82c1-0c1bded333a9", Description = "Feed Olvia prunes and oatmeal; Dress her in embarrasing outfit", Rating = 5, TaskTitle = "Feed and Dress Baby" },
                        new { AppTaskId = 3, AllotedTime = 2, AppUserId = "a64ffd83-15e9-497b-82c1-0c1bded333a9", Description = "Outfit: Red Kilt and green sleeveless shirt", Rating = 3, TaskTitle = "Get Dressed" },
                        new { AppTaskId = 4, AllotedTime = 5, AppUserId = "a64ffd83-15e9-497b-82c1-0c1bded333a9", Description = "Defrost ice off or winshield and warm car", Rating = 1, TaskTitle = "Defrost Car" },
                        new { AppTaskId = 5, AllotedTime = 10, AppUserId = "a64ffd83-15e9-497b-82c1-0c1bded333a9", Description = "wash the stench off", Rating = 2, TaskTitle = "Shower" }
                    );
                });

            modelBuilder.Entity("RoutineAlarmClockAPI.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "a64ffd83-15e9-497b-82c1-0c1bded333a9", AccessFailedCount = 0, ConcurrencyStamp = "f173bbe0-4983-4f75-aa8c-0963f53f1260", Email = "Aaron@gmail.com", EmailConfirmed = true, LockoutEnabled = false, Name = "Aaron", NormalizedEmail = "AARON@GMAIL.COM", NormalizedUserName = "AARON", PasswordHash = "AQAAAAEAACcQAAAAENJ+myjNSZAfzWBoWJ8oulwEmFrSBf1BMcuBSkj5QyKrsb50MUML4FeDZkaKpJnq3g==", PhoneNumberConfirmed = false, SecurityStamp = "14794b0b-08f0-414a-bd9d-0f95ad250bed", TwoFactorEnabled = false, UserName = "Aaron@gmail.com" }
                    );
                });

            modelBuilder.Entity("RoutineAlarmClockAPI.Models.Routine", b =>
                {
                    b.Property<int>("RoutineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllotedTime");

                    b.Property<string>("AppUserId");

                    b.Property<int>("ArrivalTime");

                    b.Property<string>("Destination")
                        .HasMaxLength(150);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("RoutineId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Routine");

                    b.HasData(
                        new { RoutineId = 1, AllotedTime = 30, AppUserId = "a64ffd83-15e9-497b-82c1-0c1bded333a9", ArrivalTime = 450, Destination = "Nashville Software School", Title = "Work Solo" },
                        new { RoutineId = 2, AllotedTime = 45, AppUserId = "a64ffd83-15e9-497b-82c1-0c1bded333a9", ArrivalTime = 540, Destination = "Nashville Software School", Title = "Work Baby" }
                    );
                });

            modelBuilder.Entity("RoutineAlarmClockAPI.Models.RoutineTask", b =>
                {
                    b.Property<int>("RoutineTaskId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppTaskId");

                    b.Property<int>("RoutineId");

                    b.HasKey("RoutineTaskId");

                    b.HasIndex("AppTaskId");

                    b.HasIndex("RoutineId");

                    b.ToTable("RoutineTask");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RoutineAlarmClockAPI.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RoutineAlarmClockAPI.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RoutineAlarmClockAPI.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RoutineAlarmClockAPI.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RoutineAlarmClockAPI.Models.AppTask", b =>
                {
                    b.HasOne("RoutineAlarmClockAPI.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("RoutineAlarmClockAPI.Models.Routine", b =>
                {
                    b.HasOne("RoutineAlarmClockAPI.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("RoutineAlarmClockAPI.Models.RoutineTask", b =>
                {
                    b.HasOne("RoutineAlarmClockAPI.Models.AppTask", "AppTasks")
                        .WithMany("RoutineTasks")
                        .HasForeignKey("AppTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RoutineAlarmClockAPI.Models.Routine", "Routines")
                        .WithMany("RoutineTasks")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
